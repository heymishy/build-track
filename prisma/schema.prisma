// Build Track - Construction Project Management Database Schema
// Tracks estimates vs actual costs, schedule variance, and milestone payments

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  projects         ProjectUser[]
  invoices         Invoice[]
  settings         UserSettings[]
  documents        ProjectDocument[]
  progressLogs     WeeklyProgressLog[]
  laborEntries     LaborEntry[]
  laborInvoices    LaborInvoice[]
  stageTransitions StageTransition[]
  supplierAccess   SupplierAccess[]
  
  // Performance Indexes
  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Project {
  id                String   @id @default(cuid())
  name              String
  description       String?
  totalBudget       Decimal
  currency          String   @default("NZD")
  startDate         DateTime?
  estimatedEndDate  DateTime?
  actualEndDate     DateTime?
  status            ProjectStatus @default(PLANNING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  users             ProjectUser[]
  trades            Trade[]
  milestones        Milestone[]
  invoices          Invoice[]
  documents         ProjectDocument[]
  progressLogs      WeeklyProgressLog[]
  laborEntries      LaborEntry[]
  laborInvoices     LaborInvoice[]
  stageTransitions  StageTransition[]
  supplierUploads   InvoiceUpload[]
  
  // Performance Indexes
  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([startDate])
  @@index([estimatedEndDate])
  @@index([status, createdAt])
  @@map("projects")
}

model ProjectUser {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole @default(VIEWER)
  createdAt DateTime @default(now())

  // Relationships
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([role])
  @@index([projectId, role])
  @@map("project_users")
}

// Trade Categories (e.g., Electrical, Plumbing, Framing)
model Trade {
  id          String   @id @default(cuid())
  projectId   String
  name        String   // e.g., "Electrical", "Plumbing", "Framing"
  description String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  lineItems   LineItem[]
  
  @@unique([projectId, name])
  @@index([projectId])
  @@index([sortOrder])
  @@index([projectId, sortOrder])
  @@index([createdAt])
  @@map("trades")
}

// Individual line items within trades
model LineItem {
  id                String   @id @default(cuid())
  tradeId           String
  itemCode          String?  // Optional code for tracking
  description       String
  quantity          Decimal
  unit              String   // e.g., "m", "m2", "each", "hours"
  
  // Estimate costs
  materialCostEst   Decimal  @default(0)
  laborCostEst      Decimal  @default(0)
  equipmentCostEst  Decimal  @default(0)
  markupPercent     Decimal  @default(0)
  overheadPercent   Decimal  @default(0)
  
  sortOrder         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  trade             Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  invoiceItems      InvoiceLineItem[]
  
  @@index([tradeId])
  @@index([itemCode])
  @@index([sortOrder])
  @@index([tradeId, sortOrder])
  @@index([createdAt])
  @@map("line_items")
}

// Construction milestones for progress payments
model Milestone {
  id              String   @id @default(cuid())
  projectId       String
  name            String   // e.g., "Foundation Complete", "Frame Complete"
  description     String?
  targetDate      DateTime
  actualDate      DateTime?
  paymentAmount   Decimal
  percentComplete Decimal  @default(0) // 0-100%
  status          MilestoneStatus @default(PENDING)
  sortOrder       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Self-referencing many-to-many relationship for dependencies
  // A milestone can depend on multiple other milestones (dependencies)
  dependencies    Milestone[] @relation("MilestoneDependencies")
  dependentOn     Milestone[] @relation("MilestoneDependencies")
  
  @@index([projectId])
  @@index([status])
  @@index([targetDate])
  @@index([actualDate])
  @@index([sortOrder])
  @@index([projectId, status])
  @@index([projectId, targetDate])
  @@index([projectId, sortOrder])
  @@map("milestones")
}

// Invoices from suppliers and contractors
model Invoice {
  id              String   @id @default(cuid())
  projectId       String
  userId          String?  // Who uploaded the invoice
  invoiceNumber   String
  supplierName    String
  supplierABN     String?  // Australian Business Number or similar
  invoiceDate     DateTime
  dueDate         DateTime?
  totalAmount     Decimal
  gstAmount       Decimal  @default(0) // GST/VAT
  status          InvoiceStatus @default(PENDING)
  pdfUrl          String?  // URL to stored PDF
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User? @relation(fields: [userId], references: [id])
  lineItems       InvoiceLineItem[]
  upload          InvoiceUpload?
  
  @@unique([projectId, invoiceNumber])
  @@index([projectId])
  @@index([userId])
  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
  @@index([supplierName])
  @@index([projectId, status])
  @@index([projectId, invoiceDate])
  @@index([projectId, supplierName])
  @@index([createdAt])
  @@map("invoices")
}

// Line items within invoices mapped to estimate line items
model InvoiceLineItem {
  id              String   @id @default(cuid())
  invoiceId       String
  lineItemId      String?  // Link to estimate line item if applicable
  description     String
  quantity        Decimal
  unitPrice       Decimal
  totalPrice      Decimal
  category        String   @default("MATERIAL") // MATERIAL, LABOR, EQUIPMENT, OTHER
  createdAt       DateTime @default(now())

  // Relationships
  invoice         Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  lineItem        LineItem? @relation(fields: [lineItemId], references: [id])
  
  @@index([invoiceId])
  @@index([lineItemId])
  @@index([category])
  @@index([createdAt])
  @@map("invoice_line_items")
}

// Enums
enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum ProjectRole {
  OWNER
  CONTRACTOR
  VIEWER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum InvoiceStatus {
  PENDING
  APPROVED
  PAID
  DISPUTED
  REJECTED
}

enum DocumentCategory {
  BLUEPRINT
  PLAN
  CONSENT
  CONTRACT
  PERMIT
  PHOTO
  INVOICE
  REPORT
  OTHER
}

enum LaborRole {
  SENIOR_BUILDER
  BUILDER
  APPRENTICE
  LABOURER
  SPECIALIST
}

// Documents for projects (PDFs, plans, images, contracts)
model ProjectDocument {
  id          String   @id @default(cuid())
  projectId   String
  name        String   // Document name/title
  fileName    String   // Original file name
  fileUrl     String   // Storage URL
  fileType    String   // MIME type
  fileSize    Int      // File size in bytes
  category    DocumentCategory @default(OTHER)
  uploadedBy  String   // User ID who uploaded
  stage       ProjectStatus    // Which stage this document belongs to
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploader    User @relation(fields: [uploadedBy], references: [id])

  @@index([projectId])
  @@index([uploadedBy])
  @@index([category])
  @@index([stage])
  @@index([fileType])
  @@index([projectId, category])
  @@index([projectId, stage])
  @@index([createdAt])
  @@map("project_documents")
}

// Weekly progress logs for construction stage
model WeeklyProgressLog {
  id           String   @id @default(cuid())
  projectId    String
  weekStarting DateTime // Start of the week
  weekEnding   DateTime // End of the week
  summary      String   // Progress summary
  issues       String?  // Issues encountered
  nextWeekPlan String?  // Plans for next week
  createdBy    String   // User ID
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator      User @relation(fields: [createdBy], references: [id])
  photos       ProgressPhoto[]

  @@index([projectId])
  @@index([createdBy])
  @@index([weekStarting])
  @@index([weekEnding])
  @@index([projectId, weekStarting])
  @@index([createdAt])
  @@map("weekly_progress_logs")
}

// Photos associated with progress logs
model ProgressPhoto {
  id           String   @id @default(cuid())
  logId        String
  fileName     String
  fileUrl      String
  caption      String?
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())

  // Relationships
  progressLog  WeeklyProgressLog @relation(fields: [logId], references: [id], onDelete: Cascade)

  @@index([logId])
  @@index([sortOrder])
  @@index([logId, sortOrder])
  @@index([createdAt])
  @@map("progress_photos")
}

// Labor tracking for construction stage
model LaborEntry {
  id         String   @id @default(cuid())
  projectId  String
  workDate   DateTime // Date work was performed
  workerRole LaborRole
  hoursWorked Decimal
  hourlyRate Decimal  // Rate at time of work
  description String? // Description of work performed
  createdBy  String   // User ID who logged the entry
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator    User @relation(fields: [createdBy], references: [id])

  @@index([projectId])
  @@index([createdBy])
  @@index([workDate])
  @@index([workerRole])
  @@index([projectId, workDate])
  @@index([projectId, workerRole])
  @@index([createdAt])
  @@map("labor_entries")
}

// Labor invoices generated from labor entries
model LaborInvoice {
  id              String   @id @default(cuid())
  projectId       String
  invoiceNumber   String
  weekStarting    DateTime // Start of week for this invoice
  weekEnding      DateTime // End of week for this invoice
  totalHours      Decimal
  subtotalAmount  Decimal  // Before GST
  gstAmount       Decimal  // GST amount
  totalAmount     Decimal  // Total including GST
  status          InvoiceStatus @default(PENDING)
  generatedBy     String   // User ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  generator       User @relation(fields: [generatedBy], references: [id])

  @@unique([projectId, invoiceNumber])
  @@index([projectId])
  @@index([status])
  @@index([weekStarting])
  @@index([weekEnding])
  @@index([generatedBy])
  @@index([projectId, status])
  @@index([projectId, weekStarting])
  @@index([createdAt])
  @@map("labor_invoices")
}

// Stage transition history
model StageTransition {
  id            String   @id @default(cuid())
  projectId     String
  fromStatus    ProjectStatus?
  toStatus      ProjectStatus
  transitionedBy String   // User ID
  reason        String?  // Optional reason for transition
  createdAt     DateTime @default(now())

  // Relationships
  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User @relation(fields: [transitionedBy], references: [id])

  @@index([projectId])
  @@index([transitionedBy])
  @@index([fromStatus])
  @@index([toStatus])
  @@index([projectId, createdAt])
  @@index([createdAt])
  @@map("stage_transitions")
}

// User Settings for API keys and configuration persistence
model UserSettings {
  id        String   @id @default(cuid())
  userId    String
  key       String   // Setting key (e.g., "anthropic_api_key", "default_strategy")
  value     String   // JSON-encoded setting value
  encrypted Boolean  @default(false) // Whether the value is encrypted
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId])
  @@index([key])
  @@index([encrypted])
  @@index([createdAt])
  @@map("user_settings")
}

// Supplier Portal - Email-based access for invoice uploads
model SupplierAccess {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String   // Supplier/subcontractor name
  type      SupplierType @default(SUPPLIER)
  isActive  Boolean  @default(true)
  createdBy String   // Admin user who added this supplier
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  creator   User @relation(fields: [createdBy], references: [id])
  invoiceUploads InvoiceUpload[]

  @@index([email])
  @@index([type])
  @@index([isActive])
  @@index([createdBy])
  @@index([isActive, type])
  @@index([createdAt])
  @@map("supplier_access")
}

// Invoice uploads via supplier portal
model InvoiceUpload {
  id            String   @id @default(cuid())
  supplierEmail String   // Email address used for upload
  projectId     String?  // Optional project assignment
  fileName      String   // Original filename
  fileUrl       String   // Storage URL for PDF
  fileSize      Int      // File size in bytes
  supplierName  String?  // Supplier name from upload form
  notes         String?  // Optional notes from supplier
  status        UploadStatus @default(PENDING)
  processedAt   DateTime? // When it was converted to a full Invoice
  invoiceId     String?  // Reference to created Invoice if processed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  supplier      SupplierAccess @relation(fields: [supplierEmail], references: [email])
  project       Project? @relation(fields: [projectId], references: [id])
  invoice       Invoice? @relation(fields: [invoiceId], references: [id])

  @@unique([invoiceId])
  @@index([supplierEmail])
  @@index([projectId])
  @@index([status])
  @@index([processedAt])
  @@index([invoiceId])
  @@index([projectId, status])
  @@index([supplierEmail, status])
  @@index([createdAt])
  @@map("invoice_uploads")
}

enum SupplierType {
  SUPPLIER
  SUBCONTRACTOR
}

enum UploadStatus {
  PENDING      // Uploaded but not processed
  PROCESSED    // Converted to full invoice
  REJECTED     // Invalid or rejected upload
}
