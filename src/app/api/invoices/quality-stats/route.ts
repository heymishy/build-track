/**
 * API Route: /api/invoices/quality-stats
 * Provides PDF extraction quality statistics and monitoring data
 */

import { NextRequest, NextResponse } from 'next/server'
import { withAuth, AuthUser } from '@/lib/middleware'
import { prisma } from '@/lib/prisma'

async function GET(request: NextRequest, user: AuthUser) {
  try {
    // Get recent invoices for quality analysis
    const recentInvoices = await prisma.invoice.findMany({
      where: {
        userId: user.id,
        createdAt: {
          gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days
        },
      },
      select: {
        id: true,
        supplierName: true,
        totalAmount: true,
        createdAt: true,
        notes: true,
      },
      orderBy: { createdAt: 'desc' },
      take: 100,
    })

    // Analyze quality indicators from the data
    const stats = {
      totalInvoices: recentInvoices.length,

      // Supplier name quality (proxy for extraction quality)
      unknownSuppliers: recentInvoices.filter(
        inv => inv.supplierName === 'Unknown Supplier' || !inv.supplierName
      ).length,

      // Auto-generated invoice numbers (indicates parsing issues)
      autoGeneratedNumbers: recentInvoices.filter(
        inv => inv.notes?.includes('AUTO-') || inv.notes?.includes('Parsed from PDF')
      ).length,

      // Zero amounts (indicates parsing issues)
      zeroAmounts: recentInvoices.filter(inv => inv.totalAmount === 0).length,

      // Recent activity
      last7Days: recentInvoices.filter(
        inv => inv.createdAt > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
      ).length,

      last24Hours: recentInvoices.filter(
        inv => inv.createdAt > new Date(Date.now() - 24 * 60 * 60 * 1000)
      ).length,
    }

    // Calculate quality scores
    const qualityScores = {
      supplierNameQuality:
        stats.totalInvoices > 0
          ? ((stats.totalInvoices - stats.unknownSuppliers) / stats.totalInvoices) * 100
          : 0,

      invoiceNumberQuality:
        stats.totalInvoices > 0
          ? ((stats.totalInvoices - stats.autoGeneratedNumbers) / stats.totalInvoices) * 100
          : 0,

      amountExtractionQuality:
        stats.totalInvoices > 0
          ? ((stats.totalInvoices - stats.zeroAmounts) / stats.totalInvoices) * 100
          : 0,
    }

    const overallQuality =
      stats.totalInvoices > 0
        ? (qualityScores.supplierNameQuality +
            qualityScores.invoiceNumberQuality +
            qualityScores.amountExtractionQuality) /
          3
        : 0

    // Quality trend (compare last 7 days vs previous 7 days)
    const previousWeekInvoices = await prisma.invoice.findMany({
      where: {
        userId: user.id,
        createdAt: {
          gte: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),
          lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        },
      },
      select: {
        supplierName: true,
        totalAmount: true,
        notes: true,
      },
      take: 100,
    })

    const previousWeekUnknownSuppliers = previousWeekInvoices.filter(
      inv => inv.supplierName === 'Unknown Supplier' || !inv.supplierName
    ).length

    const previousWeekQuality =
      previousWeekInvoices.length > 0
        ? ((previousWeekInvoices.length - previousWeekUnknownSuppliers) /
            previousWeekInvoices.length) *
          100
        : 0

    const qualityTrend = qualityScores.supplierNameQuality - previousWeekQuality

    return NextResponse.json({
      success: true,
      stats,
      qualityScores,
      overallQuality: Math.round(overallQuality),
      qualityTrend: Math.round(qualityTrend * 10) / 10, // Round to 1 decimal
      recommendations: generateRecommendations(stats, qualityScores, overallQuality),
    })
  } catch (error) {
    console.error('Quality stats API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to retrieve quality statistics' },
      { status: 500 }
    )
  }
}

function generateRecommendations(
  stats: {
    totalInvoices: number
    unknownSuppliers: number
    autoGeneratedNumbers: number
    zeroAmounts: number
    last7Days: number
    last24Hours: number
  },
  qualityScores: {
    supplierNameQuality: number
    invoiceNumberQuality: number
    amountExtractionQuality: number
  },
  overallQuality: number
): string[] {
  const recommendations: string[] = []

  if (overallQuality < 50) {
    recommendations.push(
      'Overall extraction quality is low. Consider using higher quality PDF files.'
    )
  }

  if (qualityScores.supplierNameQuality < 60) {
    recommendations.push(
      'Many suppliers are showing as "Unknown". Check PDF quality and ensure supplier names are clearly visible.'
    )
  }

  if (qualityScores.amountExtractionQuality < 70) {
    recommendations.push(
      'Amount extraction issues detected. Verify that totals are clearly marked in your PDFs.'
    )
  }

  if (stats.totalInvoices === 0) {
    recommendations.push('No recent invoices found. Upload some PDFs to see quality statistics.')
  } else if (stats.totalInvoices < 5) {
    recommendations.push('Upload more invoices to get more accurate quality statistics.')
  }

  if (recommendations.length === 0) {
    recommendations.push('Extraction quality looks good! Keep using similar PDF formats.')
  }

  return recommendations
}

const protectedGET = withAuth(GET, {
  resource: 'invoices',
  action: 'read',
  requireAuth: true,
})

export { protectedGET as GET }
